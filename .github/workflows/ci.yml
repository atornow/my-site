name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RUBY_VERSION: '3.2.3'

jobs:
  scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Check code style
      run: bundle exec rubocop

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev

    - name: Create database
      env:
        DATABASE_URL: postgres://postgres:password@localhost:5432/my_site_test
        RAILS_ENV: test
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      run: |
        bin/rails db:create
        bin/rails db:schema:load

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:password@localhost:5432/my_site_test
        RAILS_ENV: test
      run: bundle exec rspec
        
    - name: Run security audit
      run: bundle exec brakeman --no-pager

  deploy:
    needs: [scan, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          # Navigate to app directory
          cd /var/www/my-site

          # Pull latest code (or clone if first time)
          if [ -d ".git" ]; then
            git pull origin main
          else
            git clone https://github.com/atornow/my-site.git .
          fi

          docker build -t my-site:latest .
          docker stop my-site || true
          docker rm my-site || true
          docker run -d --name my-site \
            --network host \
            -e RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }} \
            -e DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }} \
            my-site:latest