require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/thoughts", type: :request do
  let(:user) { User.create!(email: 'test@example.com', password: 'password123', password_confirmation: 'password123') }
  
  let(:valid_attributes) {
    { title: "Test Thought", body: "This is a test thought" }
  }

  let(:invalid_attributes) {
    { title: "", body: "This is a test thought" }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Thought.create! valid_attributes
      get thoughts_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      thought = Thought.create! valid_attributes
      get thought_url(thought)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    context "when user is authenticated" do
      before { sign_in user }
      
      it "renders a successful response" do
        get new_thought_url
        expect(response).to be_successful
      end
    end
    
    context "when user is not authenticated" do
      it "redirects to login" do
        get new_thought_url
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "GET /edit" do
    context "when user is authenticated" do
      before { sign_in user }
      
      it "renders a successful response" do
        thought = Thought.create! valid_attributes
        get edit_thought_url(thought)
        expect(response).to be_successful
      end
    end
    
    context "when user is not authenticated" do
      it "redirects to login" do
        thought = Thought.create! valid_attributes
        get edit_thought_url(thought)
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "POST /create" do
    context "when user is authenticated" do
      before { sign_in user }
      
      context "with valid parameters" do
        it "creates a new Thought" do
          expect {
            post thoughts_url, params: { thought: valid_attributes }
          }.to change(Thought, :count).by(1)
        end

        it "redirects to the created thought" do
          post thoughts_url, params: { thought: valid_attributes }
          expect(response).to redirect_to(thought_url(Thought.last))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Thought" do
          expect {
            post thoughts_url, params: { thought: invalid_attributes }
          }.to change(Thought, :count).by(0)
        end

        it "renders a response with 422 status" do
          post thoughts_url, params: { thought: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end
    end
    
    context "when user is not authenticated" do
      it "redirects to login" do
        post thoughts_url, params: { thought: valid_attributes }
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "PATCH /update" do
    context "when user is authenticated" do
      before { sign_in user }
      
      let(:new_attributes) {
        { title: "Updated Thought", body: "This is an updated thought" }
      }

      context "with valid parameters" do
        it "updates the requested thought" do
          thought = Thought.create! valid_attributes
          patch thought_url(thought), params: { thought: new_attributes }
          thought.reload
          expect(thought.title).to eq("Updated Thought")
        end

        it "redirects to the thought" do
          thought = Thought.create! valid_attributes
          patch thought_url(thought), params: { thought: new_attributes }
          expect(response).to redirect_to(thought_url(thought))
        end
      end

      context "with invalid parameters" do
        it "renders a response with 422 status" do
          thought = Thought.create! valid_attributes
          patch thought_url(thought), params: { thought: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end
    end
    
    context "when user is not authenticated" do
      it "redirects to login" do
        thought = Thought.create! valid_attributes
        patch thought_url(thought), params: { thought: valid_attributes }
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "DELETE /destroy" do
    context "when user is authenticated" do
      before { sign_in user }
      
      it "destroys the requested thought" do
        thought = Thought.create! valid_attributes
        expect {
          delete thought_url(thought)
        }.to change(Thought, :count).by(-1)
      end

      it "redirects to the thoughts list" do
        thought = Thought.create! valid_attributes
        delete thought_url(thought)
        expect(response).to redirect_to(thoughts_url)
      end
    end
    
    context "when user is not authenticated" do
      it "redirects to login" do
        thought = Thought.create! valid_attributes
        delete thought_url(thought)
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end
end
